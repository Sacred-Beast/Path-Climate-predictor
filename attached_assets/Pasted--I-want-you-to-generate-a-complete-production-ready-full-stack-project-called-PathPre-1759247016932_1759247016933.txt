
---

I want you to generate a **complete, production-ready full-stack project** called **PathPredict — AI Route Weather Intelligence Engine**, built **100% with free tools and APIs**, fast, and fully working. The project must include:

* **Backend:** Python + FastAPI
* **ML:** Facebook Prophet for time-series weather prediction
* **Frontend:** React + Leaflet.js, fully responsive, **PWA-ready**
* **Extra features:** AI Q&A layer, offline caching of past weather data, multi-route optimization, dynamic segment alerts

The output should include:

1. **Full folder structure** with descriptions of each file
2. **Backend boilerplate** including FastAPI endpoints, Prophet model, risk scoring, and route segmentation
3. **Frontend boilerplate** including React pages, Leaflet map, timeline visualization, alerts panel, PWA configuration
4. **Utilities** for fetching free data (Open-Meteo for weather, OSMnx/OpenRouteService for routing)
5. **Sample datasets** and instructions to run locally
6. **Readme** with step-by-step setup, running instructions, and usage examples
7. **All code should be ready to copy-paste and run immediately**

---

## 1️⃣ Project Description

**PathPredict** predicts **minute-by-minute weather and route conditions** for a journey from Point A to Point B. Key features:

* Segment-wise weather timeline along the route
* Best departure time recommendation
* Risk and severity scoring for each segment
* Route comparison & optimization
* Alerts for changing weather conditions
* AI-powered Q&A: “What if I leave 30 mins later?”
* Offline caching of past weather data
* Progressive Web App for mobile use

All functionality should use **free services** (Open-Meteo API for weather, OSMnx/OpenRouteService for routing, Leaflet.js for maps).

---

## 2️⃣ System Workflow

1. **User Input:** Start, destination, optional departure time
2. **Route Segmentation:** Break route into segments (~5km or ~10 min travel) using OSMnx/OpenRouteService
3. **Weather Data Fetch:** Fetch forecasted & historical weather data from Open-Meteo
4. **Time-Aligned Prediction:** Use Prophet to forecast weather for the time the user reaches each segment
5. **Risk Scoring:** Calculate risk per segment (rain × wind × temperature × severity)
6. **Recommendation Engine:** Suggest best departure time or alternative route
7. **Visualization:** Map + timeline showing segment risk, alerts, and weather icons
8. **AI Layer:** Optional Q&A using local LLM to answer natural-language questions
9. **Offline Mode:** Cache recent weather predictions locally for offline use

---

## 3️⃣ Backend Requirements (FastAPI)

**Endpoints:**

* `/route/plan`: Input A → B + departure → return segments with ETA & weather
* `/weather/forecast`: Return predicted weather per segment using Prophet
* `/recommendation/departure`: Suggest best departure time to minimize risk
* `/analyze/conditions`: Return risk score and segment classification
* `/qa`: AI-powered answers to user questions about route & conditions (optional local LLM)

**Utilities:**

* `segmenter.py` → split route into segments
* `openmeteo_api.py` → fetch free weather data
* `osmnx_wrapper.py` → fetch route & distance from OSM
* `prophet_model.py` → Prophet-based weather predictor
* `severity_score.py` → calculate risk per segment

---

## 4️⃣ Frontend Requirements (React + Leaflet + PWA)

**Pages & Components:**

* `Home.jsx` → Input panel for start, end, departure time
* `MapView.jsx` → Leaflet map showing route with color-coded risk
* `Timeline.jsx` → Segment-wise timeline showing predicted weather & ETA
* `AlertsPanel.jsx` → List of active/predicted alerts
* `Backend.js` → Handles API calls to FastAPI backend
* **PWA Configuration:** manifest.json + service worker for offline mode

**Features:**

* Interactive map with zoom & pan
* Timeline visualization for weather & segment ETA
* Alerts feed for risky segments
* Departure time recommendations
* AI-powered Q&A box (optional local LLM)

---

## 5️⃣ ML / AI Components

* **Prophet Model:** Predicts weather per segment based on historical + forecast data
* **Risk Scoring:** Weighted formula (rain × wind × segment length) → Safe / Moderate / Risky
* **Decision Engine:** Suggests optimal departure time minimizing cumulative risk
* **AI Q&A Layer:** Optional local LLM (e.g., LLaMA, MPT, or Alpaca) for route-related questions

---

## 6️⃣ Project Folder Structure

```
PathPredict/
├── backend/
│   ├── app/
│   │   ├── main.py                  # FastAPI entrypoint
│   │   ├── routes/
│   │   │   ├── planner.py           # Route planning endpoint
│   │   │   ├── forecast.py          # Weather prediction endpoint
│   │   │   ├── recommend.py         # Departure recommendation
│   │   │   └── qa.py                # AI Q&A (optional)
│   │   ├── ml/
│   │   │   ├── prophet_model.py     # Prophet forecast model
│   │   │   └── severity_score.py    # Risk scoring
│   │   └── utils/
│   │       ├── segmenter.py
│   │       ├── openmeteo_api.py
│   │       └── osmnx_wrapper.py
│   └── requirements.txt
├── frontend/
│   ├── src/
│   │   ├── pages/
│   │   │   └── Home.jsx
│   │   ├── components/
│   │   │   ├── MapView.jsx
│   │   │   ├── Timeline.jsx
│   │   │   └── AlertsPanel.jsx
│   │   ├── api/
│   │   │   └── backend.js
│   │   └── App.jsx
│   ├── public/
│   │   └── manifest.json            # PWA manifest
│   └── package.json
├── data/
│   ├── historical_weather/           # CSVs or JSON for Prophet training
├── notebooks/
│   └── prophet_demo.ipynb            # Optional tutorial notebook
├── README.md
└── run.sh                            # Script to launch backend + frontend
```

---

## 7️⃣ Free Data Sources

* **Weather:** [Open-Meteo](https://open-meteo.com/) → 7-day forecast + historical
* **Routing:** [OpenRouteService](https://openrouteservice.org/) → free developer API
* **Historical weather:** [Meteostat](https://meteostat.net/en/) → free CSV API
* **Maps:** [Leaflet.js](https://leafletjs.com/) → free map rendering

---

## 8️⃣ Setup Instructions (For AI to generate)

* **Backend:** `pip install -r requirements.txt` → `uvicorn app.main:app --reload`
* **Frontend:** `npm install` → `npm run start`
* **PWA:** service worker automatically caches route & weather data
* **ML:** Prophet model trains on historical weather (CSV) → predicts segment-wise conditions

---

